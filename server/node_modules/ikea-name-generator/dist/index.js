"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Alphabet_1 = require("./utils/Alphabet");
var numVowels = 0;
var numConsonants = 0;
//===== FUNCTIONS THAT GET THE NEXT LETTER
// Get any letter from alphabet
function grabAnyLetter() {
    var grabAlphabet = Alphabet_1.default.wholeAlphabet();
    return grabAlphabet[Math.floor(Math.random() * grabAlphabet.length)];
}
// Get just a vowel
function grabAVowel() {
    var grabAlphabet = Alphabet_1.default.justVowels();
    return grabAlphabet[Math.floor(Math.random() * grabAlphabet.length)];
}
// Get just a consonant
function grabAConsonant() {
    var grabAlphabet = Alphabet_1.default.justConsonants();
    return grabAlphabet[Math.floor(Math.random() * grabAlphabet.length)];
}
// Get a letter than can follow the last letter
function grabNextGoodLetter(word) {
    var lastLetter = word[word.length - 1];
    var methodName = 'after' + lastLetter;
    var grabAlphabet = Alphabet_1.default[methodName]();
    return grabAlphabet[Math.floor(Math.random() * grabAlphabet.length)];
}
//===== END FUNCTIONS THAT GET NEXT LETTER
// Main function to get and return the next letter
function returnNextLetter(word) {
    var nextLetter;
    // If it's the first letter, grab any letter
    if (word.length === 0) {
        nextLetter = grabAnyLetter();
        // If it's not the first letter...
        // And there are too many consonants before it, grab a vowel
        // Or it's the second letter and the first wasn't a vowel (this makes sure there's a vowel in the first two letters for readability)
    }
    else if (numConsonants === 2 || (word.length === 1 && numConsonants === 1)) {
        nextLetter = grabAVowel();
        // Or if there are too many vowels grab a consonant
    }
    else if (numVowels === 2) {
        nextLetter = grabAConsonant();
        // Otherwise, grab the next acceptable letter
    }
    else {
        nextLetter = grabNextGoodLetter(word);
    }
    // Increase/reset consonant and vowel counters appropriately
    if (Alphabet_1.default.justVowels().indexOf(nextLetter) != -1) {
        numConsonants = 0;
        numVowels += 1;
    }
    else {
        numConsonants += 1;
        numVowels = 0;
    }
    return nextLetter;
}
/**
* @Method: Return a ikea style name.
* @Param {boolean}
* @Return {string}
*/
function getName(withSwedishCharacters) {
    if (withSwedishCharacters === void 0) { withSwedishCharacters = true; }
    numVowels = 0;
    numConsonants = 0;
    // Pick random word length between 5 and 9 characters
    var wordLength = Math.floor(Math.random() * 6) + 5;
    var word = '';
    // Generate each letter wordLength times
    for (var arrayIndex = 0; arrayIndex < wordLength; arrayIndex++) {
        word += returnNextLetter(word);
    }
    // Checks if word ended with two consonants. For readability, end with an extra vowel
    var lastLetters = word.slice(-2);
    if (Alphabet_1.default.justVowels().indexOf(lastLetters[0]) == -1 && Alphabet_1.default.justVowels().indexOf(lastLetters[1]) == -1) {
        word += grabAVowel();
    }
    if (withSwedishCharacters) {
        // Format name to add Swedish characters if possible
        // 50/50 chance of changing first a
        var coinToss = Math.random() < 0.5;
        if (coinToss)
            word = word.replace("a", "รฅ");
        // 50/50 chance of changing first o
        coinToss = Math.random() < 0.5;
        if (coinToss)
            word = word.replace("o", "รถ");
    }
    return word;
}
exports.getName = getName;
