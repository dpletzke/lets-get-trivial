"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inferArgTypes = void 0;

var _mapValues = _interopRequireDefault(require("lodash/mapValues"));

var _parameters = require("./parameters");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var inferType = function inferType(value) {
  var type = _typeof(value);

  switch (type) {
    case 'boolean':
    case 'string':
    case 'number':
    case 'function':
      return {
        name: type
      };

    default:
      break;
  }

  if (Array.isArray(value)) {
    var childType = value.length > 0 ? inferType(value[0]) : {
      name: 'other',
      value: 'unknown'
    };
    return {
      name: 'array',
      value: childType
    };
  }

  if (value) {
    var fieldTypes = (0, _mapValues["default"])(value, function (field) {
      return inferType(field);
    });
    return {
      name: 'object',
      value: fieldTypes
    };
  }

  return {
    name: 'object',
    value: {}
  };
};

var inferArgTypes = function inferArgTypes(context) {
  var _context$parameters = context.parameters,
      _context$parameters$a = _context$parameters.argTypes,
      userArgTypes = _context$parameters$a === void 0 ? {} : _context$parameters$a,
      _context$parameters$a2 = _context$parameters.args,
      args = _context$parameters$a2 === void 0 ? {} : _context$parameters$a2;
  if (!args) return userArgTypes;
  var argTypes = (0, _mapValues["default"])(args, function (arg) {
    return {
      type: inferType(arg)
    };
  });
  return (0, _parameters.combineParameters)(argTypes, userArgTypes);
};

exports.inferArgTypes = inferArgTypes;