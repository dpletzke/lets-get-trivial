"use strict";

var _vue = _interopRequireDefault(require("vue/dist/vue"));

var _sourceDecorator = require("./sourceDecorator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint no-underscore-dangle: ["error", { "allow": ["_vnode"] }] */
expect.addSnapshotSerializer({
  print: function print(val) {
    return val;
  },
  test: function test(val) {
    return typeof val === 'string';
  }
});

var getVNode = function getVNode(Component) {
  var vm = new _vue["default"]({
    render: function render(h) {
      return h(Component);
    }
  }).$mount();
  return vm.$children[0]._vnode;
};

describe('vnodeToString', function () {
  it('basic', function () {
    expect((0, _sourceDecorator.vnodeToString)(getVNode({
      template: "<button>Button</button>"
    }))).toMatchInlineSnapshot("<button >Button</button>");
  });
  it('attributes', function () {
    var MyComponent = {
      props: ['propA', 'propB', 'propC', 'propD'],
      template: '<div/>'
    };
    expect((0, _sourceDecorator.vnodeToString)(getVNode({
      components: {
        MyComponent: MyComponent
      },
      data: function data() {
        return {
          props: {
            propA: 'propA',
            propB: 1,
            propC: null,
            propD: {
              foo: 'bar'
            }
          }
        };
      },
      template: "<my-component v-bind=\"props\"/>"
    }))).toMatchInlineSnapshot("<my-component :propD='{\"foo\":\"bar\"}' :propC=\"null\" :propB=\"1\" propA=\"propA\"/>");
  });
  it('children', function () {
    expect((0, _sourceDecorator.vnodeToString)(getVNode({
      template: "\n          <div>\n            <form>\n              <button>Button</button>\n            </form>\n          </div>"
    }))).toMatchInlineSnapshot("<div ><form ><button >Button</button></form></div>");
  });
});