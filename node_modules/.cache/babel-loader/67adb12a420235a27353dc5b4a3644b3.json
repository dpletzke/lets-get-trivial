{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sorennissen/lighthouse/lets-get-trivial/src/components/GameplayView/Question.jsx\";\nimport PanelList from './PanelList';\nimport GameplayHeader from './GameplayHeader'; //here is the structure of the data coming from the api. Added is the questionIndex which is based on how many questions the user selects\n// const questionObj = {\n//   \"questionIndex\": 3,\n//   \"question\": \"Who wrote the novel &quot;Moby-Dick&quot;?\",\n//   \"correct_answer\": \"Herman Melville\",\n//   \"incorrect_answers\": [\n//   \"William Golding\",\n//   \"William Shakespeare\",\n//   \"J. R. R. Tolkien\"\n//   ]\n//   }\n// move this into a helper file at some point? It's just changing the data structure to fit better with our component architecture\n\nconst digestQuestionObj = questionObject => {\n  return {\n    questionIndex: questionObject.questionIndex,\n    question: [{\n      questionString: questionObject.question\n    }],\n    answers: [...questionObject.incorrect_answers.map(incorrectAnswer => ({\n      answerString: incorrectAnswer,\n      correct: false,\n      selected: false\n    })), {\n      answerString: questionObject.correct_answer,\n      correct: true,\n      selected: false\n    }]\n  };\n};\n\nfunction ActiveQuestion({\n  questionObj\n}) {\n  const {\n    question,\n    answers,\n    questionIndex\n  } = digestQuestionObj(questionObj);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameplayHeader, {\n      questionIndex: questionIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(PanelList, {\n        infoArray: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PanelList, {\n        infoArray: answers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n} //https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\n// for(let i = array.length — 1; i > 0; i--){\n//   const j = Math.floor(Math.random() * i)\n//   const temp = array[i]\n//   array[i] = array[j]\n//   array[j] = temp\n// }\n\n\n_c = ActiveQuestion;\nActiveQuestion.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ActiveQuestion\"\n};\nexport default ActiveQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveQuestion\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/GameplayView/Question.jsx\"] = {\n    name: \"ActiveQuestion\",\n    docgenInfo: ActiveQuestion.__docgenInfo,\n    path: \"src/components/GameplayView/Question.jsx\"\n  };\n}","map":{"version":3,"sources":["/Users/sorennissen/lighthouse/lets-get-trivial/src/components/GameplayView/Question.jsx"],"names":["PanelList","GameplayHeader","digestQuestionObj","questionObject","questionIndex","question","questionString","answers","incorrect_answers","map","incorrectAnswer","answerString","correct","selected","correct_answer","ActiveQuestion","questionObj"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,iBAAiB,GAAIC,cAAD,IAAoB;AAC5C,SAAO;AACLC,IAAAA,aAAa,EAAED,cAAc,CAACC,aADzB;AAELC,IAAAA,QAAQ,EAAE,CAAC;AAACC,MAAAA,cAAc,EAAEH,cAAc,CAACE;AAAhC,KAAD,CAFL;AAILE,IAAAA,OAAO,EAAE,CACT,GAAGJ,cAAc,CAACK,iBAAf,CAAiCC,GAAjC,CAAsCC,eAAD,KAAsB;AAACC,MAAAA,YAAY,EAAED,eAAf;AAAgCE,MAAAA,OAAO,EAAE,KAAzC;AAAgDC,MAAAA,QAAQ,EAAE;AAA1D,KAAtB,CAArC,CADM,EAET;AAACF,MAAAA,YAAY,EAAER,cAAc,CAACW,cAA9B;AAA8CF,MAAAA,OAAO,EAAE,IAAvD;AAA6DC,MAAAA,QAAQ,EAAE;AAAvE,KAFS;AAJJ,GAAP;AAWD,CAZD;;AAcA,SAASE,cAAT,CAAwB;AAACC,EAAAA;AAAD,CAAxB,EAAuC;AAErC,QAAM;AAACX,IAAAA,QAAD;AAAWE,IAAAA,OAAX;AAAoBH,IAAAA;AAApB,MAAqCF,iBAAiB,CAACc,WAAD,CAA5D;AAEA,sBACE;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,aAAa,EAAEZ;AAA/B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BAEF,QAAC,SAAD;AAAW,QAAA,SAAS,EAAIC;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFE,eAGD,QAAC,SAAD;AACE,QAAA,SAAS,EAAIE;AADf;AAAA;AAAA;AAAA;AAAA,cAHC;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;KAxBSQ,c;;;;;;AA0BT,eAAeA,cAAf","sourcesContent":["import PanelList from './PanelList'\nimport GameplayHeader from './GameplayHeader'\n\n\n//here is the structure of the data coming from the api. Added is the questionIndex which is based on how many questions the user selects\n// const questionObj = {\n//   \"questionIndex\": 3,\n//   \"question\": \"Who wrote the novel &quot;Moby-Dick&quot;?\",\n//   \"correct_answer\": \"Herman Melville\",\n//   \"incorrect_answers\": [\n//   \"William Golding\",\n//   \"William Shakespeare\",\n//   \"J. R. R. Tolkien\"\n//   ]\n//   }\n\n// move this into a helper file at some point? It's just changing the data structure to fit better with our component architecture\nconst digestQuestionObj = (questionObject) => {\n  return {\n    questionIndex: questionObject.questionIndex,\n    question: [{questionString: questionObject.question}],\n    \n    answers: [\n    ...questionObject.incorrect_answers.map((incorrectAnswer) => ({answerString: incorrectAnswer, correct: false, selected: false})),\n    {answerString: questionObject.correct_answer, correct: true, selected: false}\n    ]\n    \n    \n  };\n}\n\nfunction ActiveQuestion({questionObj}) {\n  \n  const {question, answers, questionIndex} = digestQuestionObj(questionObj)\n\n  return (\n    <div>\n      <GameplayHeader questionIndex={questionIndex}/>\n      <div>\n        {/* the two panels in this view can be targeted individually due to their condition css, see PanelList component */}\n    <PanelList infoArray = {question} />\n     <PanelList \n       infoArray = {answers}\n       />\n      </div>\n    </div>\n  );\n}\n\n//https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\n// for(let i = array.length — 1; i > 0; i--){\n//   const j = Math.floor(Math.random() * i)\n//   const temp = array[i]\n//   array[i] = array[j]\n//   array[j] = temp\n// }\n\nexport default ActiveQuestion;"]},"metadata":{},"sourceType":"module"}